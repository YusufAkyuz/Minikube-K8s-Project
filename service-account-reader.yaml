# service-account-reader.yaml
# ServiceAccount oluştur
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cluster-reader
  namespace: default
---
# ClusterRole - Tüm objeler için okuma ve listeleme yetkisi
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cluster-reader-role
rules:
- apiGroups: ["*"]
  resources: ["*"]
  verbs: ["get", "list", "watch"]
---
# ClusterRoleBinding - ServiceAccount ile ClusterRole bağlantısı
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cluster-reader-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-reader-role
subjects:
- kind: ServiceAccount
  name: cluster-reader
  namespace: default
---
# Test Pod - ServiceAccount ile API'ye erişecek
apiVersion: v1
kind: Pod
metadata:
  name: api-test-pod
  namespace: default
spec:
  serviceAccountName: cluster-reader
  containers:
  - name: api-test
    image: curlimages/curl:latest
    command: 
    - sh
    - -c
    - |
      # Container başladığında bekle
      echo "Pod started. Kubernetes API'ye erişim test ediliyor..."
      
      # Token'ı oku
      TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
      CACERT=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      NAMESPACE=$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)
      
      # Kubernetes API sunucusunu bul
      APISERVER=https://kubernetes.default.svc
      
      echo "API Server: $APISERVER"
      echo "Namespace: $NAMESPACE"
      echo ""
      echo "Tüm pod'ları listeliyorum..."
      echo "================================"
      
      # Tüm namespace'lerdeki pod'ları listele
      curl -s --cacert $CACERT \
           -H "Authorization: Bearer $TOKEN" \
           $APISERVER/api/v1/pods | \
           grep -E '"namespace":|"name":|"phase":' | \
           sed 's/^[ \t]*//g' | \
           awk 'NR%3==1{printf "\nNamespace: "} NR%3==2{printf "Pod: "} NR%3==0{printf "Status: "}1'
      
      echo ""
      echo "================================"
      echo "Test tamamlandı. Pod çalışmaya devam edecek..."
      
      # Pod'u canlı tut
      while true; do sleep 3600; done
    resources:
      requests:
        memory: "32Mi"
        cpu: "10m"
      limits:
        memory: "64Mi"
        cpu: "50m"